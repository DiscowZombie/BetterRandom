variables:
- group: Build Secrets
- name: hotspot08
  value: '/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64'
- name: hotspot11
  value: '/usr/lib/jvm/adoptopenjdk-11-hotspot-amd64'
- name: hotspotLatest
  value: '/usr/lib/jvm/adoptopenjdk-14-hotspot-amd64'
- name: openJNine08
  value: '/usr/lib/jvm/adoptopenjdk-8-openj9-amd64'
- name: openJNine11
  value: '/usr/lib/jvm/adoptopenjdk-11-openj9-amd64'
- name: openJNineLatest
  value: '/usr/lib/jvm/adoptopenjdk-14-openj9-amd64'
trigger:
  batch: true
  branches:
    include:
      - '*'
    exclude:
      - 'dependabot/*'
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
      - .submodules
      - .github/
      - docs/
      - 'benchmark/*.iml'
      - 'betterrandom/*.iml'
      - 'FifoFiller/*.iml'
schedules:
  - cron: "23 0 * * *"
    displayName: Nightly
    branches:
      include:
        - master
    always: true
pr:
  branches:
    include:
      - master
  paths:
    exclude:
      - README.md
      - CHANGELOG.md
      - .submodules
      - .github/
      - docs/
      - 'benchmark/*.iml'
      - 'betterrandom/*.iml'
      - 'FifoFiller/*.iml'
stages:
  - stage: UnitTests
    jobs:
      - job: UnitLinuxPreinstalled
        strategy:
          matrix:
            OpenJdk08:
              PROGUARD: 'true'
              JAVA_HOME: $(hotspot08)
              artifactEnvName: OpenJdk08Linux
            OpenJdk11:
              PROGUARD: 'true'
              JAVA_HOME: $(hotspot11)
              artifactEnvName: OpenJdk11Linux
        pool:
          vmImage: 'ubuntu-latest'
        steps:
        - template: etc/azureTemplate/unitTestsUbuntu.yml
        - template: etc/azureTemplate/publishCoverage.yml
      - job: UnitLinux
        variables:
          JAVA_HOME: jdk
        strategy:
          matrix:
            HotspotLatest:
              JAVA_HOME: $(hotspotLatest)
              ubuntuPackage: adoptopenjdk-14-hotspot
              artifactEnvName: HotspotLatestLinux
            OpenJNine08:
              PROGUARD: 'true'
              ubuntuPackage: adoptopenjdk-8-openj9
              JAVA_HOME: $(OpenJNine08)
              artifactEnvName: OpenJNine08Linux
            OpenJNine11:
              PROGUARD: 'true'
              ubuntuPackage: adoptopenjdk-11-openj9
              JAVA_HOME: $(OpenJNine11)
              artifactEnvName: OpenJNine11Linux
            OpenJNineLatest:
              JAVA_HOME: $(OpenJNineLatest)
              ubuntuPackage: adoptopenjdk-14-openj9
              artifactEnvName: OpenJNineLatestLinux
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - script: etc/scripts/addAdoptOpenJdkRepo.sh
            displayName: Install AdoptOpenJDK Package Repository
          - script: sudo apt-get install -y $(ubuntuPackage)
            displayName: Install JDK
            env:
              ubuntuPackage: $(ubuntuPackage)
          - template: etc/azureTemplate/unitTestsUbuntu.yml
          - template: etc/azureTemplate/publishCoverage.yml
      - job: UnitMac
        variables:
          JAVA_HOME: jdk
        strategy:
          matrix:
# FIXME: OpenJdk 8 is no longer included in the Mac image; replace with a job that downloads the JDK
#            OpenJdk08:
#              PROGUARD: 'true'
#              javaVersion: 8
#              artifactEnvName: OpenJdk08Mac
            OpenJdk11:
              PROGUARD: 'true'
              javaVersion: 11
              artifactEnvName: Hotspot11Mac
            OpenJdkLatest:
              javaVersion: 14
              artifactEnvName: HotspotLatestMac
        pool:
          vmImage: 'macOs-latest'
        steps:
          - template: etc/azureTemplate/installJavaMacLocal.yml
            parameters:
              javaVersion: $(javaVersion)
          - template: etc/azureTemplate/unitTestsMac.yml
          - template: etc/azureTemplate/publishCoverage.yml
      - job: UnitWindows
        variables:
          artifactEnvName: Windows
        strategy:
          matrix:
            OpenJdk08:
# FIXME: Gives "mvn : FATAL StatusLogger Interrupted before Log4j Providers could be loaded."
#              PROGUARD: 'true'
              JAVA_HOME_SOURCE: JAVA_HOME_8_X64
              artifactEnvName: Hotspot08Windows
            OpenJdk11:
#              PROGUARD: 'true'
              JAVA_HOME_SOURCE: JAVA_HOME_11_X64
              artifactEnvName: Hotspot11Windows
# FIXME: Replace with a job that downloads the JDK
#            OpenJdkLatest:
#              JAVA_HOME_SOURCE: JAVA_HOME_12_X64
#              artifactEnvName: OpenJdkLatestWindows
        pool:
          vmImage: 'windows-latest'
        steps:
          - powershell: etc/scripts/unit-tests.ps1
            displayName: Build & Test
            failOnStderr: false
            env:
              RANDOM_DOT_ORG_KEY: $(RANDOM_DOT_ORG_KEY)
              JAVA_HOME_SOURCE: $(JAVA_HOME_SOURCE)
          - template: etc/azureTemplate/publishCoverage.yml
  - stage: Mutation
    dependsOn: UnitTests
    jobs:
    - job: Mutation
      variables:
        JAVA_HOME: $(hotspotLatest)
      timeoutInMinutes: 120 # FIXME: Remove once reliably passing in 50
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - template: etc/azureTemplate/installHaveged.yml
        - script: ./etc/scripts/mutation.sh
          displayName: Build & Run Mutation Tests
          env:
            RANDOM_DOT_ORG_KEY: $(RANDOM_DOT_ORG_KEY)
            JAVA_HOME: $(hotspot11)
        - task: PublishBuildArtifacts@1
          displayName: Publish Mutation Report
          inputs:
            pathtoPublish: betterrandom/target/pit-reports
            artifactName: Mutation Coverage
  - stage: Benchmarks
    dependsOn: UnitTests
    jobs:
    - job: BenchmarkLinuxPreinstalled
      timeoutInMinutes: 80
      strategy:
        matrix:
          OpenJdk08:
            PROGUARD: 'true'
            JAVA_HOME: $(hotspot08)
            artifactEnvName: 'Hotspot08Linux'
          OpenJdk11:
            PROGUARD: 'true'
            JAVA_HOME: $(hotspot11)
            artifactEnvName: 'Hotspot11Linux'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - template: etc/azureTemplate/benchmark.yml
    - job: BenchmarkLinux
      timeoutInMinutes: 80
      strategy:
        matrix:
          HotspotLatest:
            JAVA_HOME: $(HotspotLatestLinux)
            ubuntuPackage: adoptopenjdk-14-hotspot            
            artifactEnvName: 'HotspotLatestLinux'
          OpenJNine08:
            PROGUARD: 'true'
            JAVA_HOME: $(OpenJNine08Linux)
            ubuntuPackage: adoptopenjdk-08-openj9
            artifactEnvName: 'OpenJNine08Linux'
          OpenJNine11:
            PROGUARD: 'true'
            JAVA_HOME: $(OpenJNine11Linux)
            ubuntuPackage: adoptopenjdk-11-openj9
            artifactEnvName: 'OpenJNine11Linux'
          OpenJNineLatest:
            JAVA_HOME: $(OpenJNineLatestLinux)
            ubuntuPackage: adoptopenjdk-14-openj9            
            artifactEnvName: 'OpenJNineLatestLinux'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - script: etc/scripts/addAdoptOpenJdkRepo.sh
          displayName: Install AdoptOpenJDK Package Repository
        - script: sudo apt-get install -y $(ubuntuPackage)
          displayName: Install JDK
          env:
            ubuntuPackage: $(ubuntuPackage)
        - template: etc/azureTemplate/benchmark.yml
    - job: BenchmarkMac
      timeoutInMinutes: 80
      variables:
        artifactEnvName: OpenJdkMac
        JAVA_HOME: jdk
      strategy:
        matrix:
# FIXME: OpenJdk 8 is no longer included in the Mac image; replace with a job that downloads the JDK
#          OpenJdk08:
#            artifactEnvName: 'OpenJdk08Mac'
#            PROGUARD: 'true'
#            javaVersion: 8
          OpenJdk11:
            PROGUARD: 'true'
            artifactEnvName: 'Hotspot11Mac'
            javaVersion: 11
          OpenJdkLatest:
            artifactEnvName: 'HotspotLatestMac'
            javaVersion: 14
      pool:
        vmImage: 'macOs-latest'
      steps:
        - template: etc/azureTemplate/installJavaMacLocal.yml
          parameters:
            javaVersion: $(javaVersion)
        - template: etc/azureTemplate/benchmark.yml
          parameters:
            whichJavaHome: JAVA_HOME_$(javaVersion)_X64
    - job: BenchmarkWindows
      timeoutInMinutes: 80
      pool:
        vmImage: 'windows-latest'
      strategy:
        matrix:
          OpenJdk08:
            PROGUARD: 'true'
            JAVA_HOME_SOURCE: JAVA_HOME_8_X64
            artifactEnvName: 'Hotspot08Windows'
# FIXME: Fails to launch; see etc/scripts/benchmark.ps1 for details
#          OpenJdk11:
#            JAVA_HOME_SOURCE: JAVA_HOME_11_X64
#            artifactEnvName: 'OpenJdk11Windows'
# FIXME: Replace with a job that downloads the JDK
#          OpenJdkLatest:
#            JAVA_HOME_SOURCE: JAVA_HOME_12_X64
#            artifactEnvName: 'OpenJdkLatestWindows'
      steps:
        - task: PowerShell@2
          displayName: Build & Benchmark
          inputs:
            filePath: etc/scripts/benchmark.ps1
            failOnStderr: false
          env:
            JAVA_HOME_SOURCE: $(JAVA_HOME_SOURCE)
            RANDOM_DOT_ORG_KEY: $(RANDOM_DOT_ORG_KEY)
        - template: etc/azureTemplate/publishBenchmark.yml
  - stage: Dieharder
    dependsOn: UnitTests
    jobs:
    - job: Dieharder
      timeoutInMinutes: 90
      variables:
        javaUrl: $(OpenJNineLatestLinux)
        JAVA_HOME: jdk
      strategy:
        matrix:
          AesCounterRandom:
            class: AesCounterRandom
          Cmwc4096Random:
            class: Cmwc4096Random
          MersenneTwisterRandom:
            class: MersenneTwisterRandom
          XorShiftRandom:
            class: XorShiftRandom
          Pcg128Random:
            class: Pcg128Random
          Pcg64Random:
            class: Pcg64Random
          SingleThreadSplittableRandomAdapter:
            class: 'adapter.SingleThreadSplittableRandomAdapter'
      pool:
        vmImage: 'ubuntu-latest'
      steps:
        - template: etc/azureTemplate/installJavaJti.yml
        - script: sudo apt install dieharder
          displayName: Install DieHarder
        - script: ./etc/scripts/dieharder.sh
          displayName: Build BetterRandom & Run DieHarder Tests
          env:
            CLASS: $(class)
          failOnStderr: false
        - task: PublishBuildArtifacts@1
          displayName: Publish Report
          inputs:
            pathtoPublish: dieharder.txt
            artifactName: DieHarder Randomness Tests - $(class)
